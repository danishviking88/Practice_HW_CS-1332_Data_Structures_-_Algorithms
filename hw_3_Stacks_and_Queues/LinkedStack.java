
import java.util.NoSuchElementException;

/**
 * Interface detailing the methods required for implementing a stack.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @author CS 1332 TAs
 * @version 1.0
 */
public class LinkedStack<T> implements StackInterface<T> {

    
    private LinkedNode<T> head;
    private int size;

    
    public LinkedStack() {
        this.head = null;
        this.size = 0;
    }


    @Override
    public T pop() {
        if (isEmpty()) {
            throw new NoSuchElementException("Stack is empty, unable to comply.");
        }

        T data = head.getData();
        head = head.getNext();
        size--;
        return data;
    }

    @Override
    public void push(T data) {
        if (data == null) {
            throw new IllegalArgumentException("Data is null, unable to comply.");
        }

        LinkedNode<T> newNode = new LinkedNode<T>(data, head);
        head = newNode;
        size++;
    }

    @Override
    public boolean isEmpty() {
        // DO NOT MODIFY THIS METHOD!
        return size == 0;
    }

    @Override
    public int size() {
        // DO NOT MODIFY THIS METHOD!
        return size;
    }

    /**
     * Returns the head of this stack.
     * Normally, you would not do this, but we need it for grading your work.
     *
     * DO NOT USE THIS METHOD IN YOUR CODE.
     *
     * @return the head node
     */
    public LinkedNode<T> getHead() {
        // DO NOT MODIFY THIS METHOD!
        return head;
    }
}
